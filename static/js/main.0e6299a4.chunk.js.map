{"version":3,"sources":["components/landingpage.js","components/main.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["landingpage","Component","Main","exact","path","component","Footer","className","App","style","backgroundColor","title","textDecoration","color","to","scroll","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAYeA,E,iLARX,OACE,6BACE,uC,GAJkBC,aCgBXC,EATF,kBACX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWL,M,MCAtBM,MARf,WACE,OACE,4BAAQC,UAAU,UAChB,oDCqCSC,G,wLAjCX,OACE,6BACE,yBAAKD,UAAU,oBACb,kBAAC,SAAD,KACE,kBAAC,SAAD,CAAQE,MAAO,CAAEC,gBAAiB,SAAUC,MAAO,kBAAC,IAAD,CAAMF,MAAO,CAAEG,eAAgB,OAAQC,MAAO,SAAUC,GAAG,KAA3D,oBAAwFC,QAAM,GAE/I,kBAAC,aAAD,CAAYN,MAAO,CAAEC,gBAAiB,UACpC,kBAAC,IAAD,CAAMI,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,aAGJ,kBAAC,SAAD,CAAQH,MAAO,kBAAC,IAAD,CAAMF,MAAO,CAACG,eAAgB,OAAQC,MAAO,SAAUC,GAAG,KAA1D,qBACb,kBAAC,aAAD,KACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,aAGJ,kBAAC,UAAD,KACE,yBAAKP,UAAU,iBACf,kBAAC,EAAD,SAKN,kBAAC,EAAD,W,GA5BUN,c,4BCIEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEAC,SAASC,eAAe,SDiHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.0e6299a4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass landingpage extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Hi</h1>\n      </div>\n    )\n  }\n}\n\nexport default landingpage;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n//\nimport landingpage from \"./landingpage\";\n// import Home from \"./Home\";\n// import About from \"./About\";\n// import Clients from \"./Clients\";\n// import Services from \"./Services\";\n\nconst Main = () => (\n  <Switch>\n    <Route exact path=\"/\" component={landingpage} />\n    {/* <Route path=\"/about\" component={About} />\n    <Route path=\"/clients\" component={Clients} />\n    <Route path=\"/services\" component={Services} /> */}\n  </Switch>\n)\n\nexport default Main;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <span>Swank PR, L.L.C.</span>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { Layout, Header, Navigation, Drawer, Content } from 'react-mdl';\nimport { Link } from \"react-router-dom\";\n//\nimport Main from \"./components/main\";\nimport Footer from \"./components/Footer\";\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"demo-big-content\">\n          <Layout >\n            <Header style={{ backgroundColor: \"black\"}} title={<Link style={{ textDecoration: 'none', color: 'white'}} to=\"/\">Swank PR, L.L.C.</Link>} scroll>\n              {/* <Header title=\"Swank PR, L.L.C\" scroll style={{ backgroundColor: \"black\" }}> */}\n              <Navigation style={{ backgroundColor: \"black\" }}>\n                <Link to=\"/about\">About</Link>\n                <Link to=\"/services\">Services</Link>\n                <Link to=\"/clients\">Clients</Link>\n              </Navigation>\n            </Header>\n            <Drawer title={<Link style={{textDecoration: 'none', color: 'black'}} to=\"/\">Swank PR, L.L.C.</Link>}>\n              <Navigation>\n                <Link to=\"/about\">About</Link>\n                <Link to=\"/services\">Services</Link>\n                <Link to=\"/clients\">Clients</Link>\n              </Navigation>\n            </Drawer>\n            <Content>\n              <div className=\"page-content\" />\n              <Main />\n            </Content>\n          </Layout>\n        </div>\n\n        <Footer />\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from './App';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n  , document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}